#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****



##############################################
#Processus permetant de copier des données d'un cube "Cible_YGH" à "Cible_YGH"
#Yasmine GHAEM, Le 10/11/2022
#MODIF


##############################################
##Déclaration Des Variables
vCubeSource= 'Source_YGH';
vCubeCible= 'Cible_LSA_Taille';
vMensualisation= ' Mensualisation';

vViewNameSource='YGH_Source2';
vViewNamePurge='YGH_Purge';

vSubsetNameSource = 'YGH_Subset_Source' ; 
vSubsetNamePurge = 'YGH_Subset_Purge' ;
vDim = 'Sales_Plan_Measures' ;




############################################################
# -- Vue Source 

# -- Créer la vue source 
ViewDestroy( vCubeSource , vViewNameSource );
ViewCreate( vCubeSource , vViewNameSource , 1 ); 

# -- Création de sous ensemble
SubsetDestroy( vDim , vSubsetNameSource ) ; 
SubsetCreate( vDim , vSubsetNameSource , 1 ) ; 
SubsetElementInsert( vDim , vSubsetNameSource , 'Quantity' , 1 ); 

ViewSubsetAssign( vCubeSource , vViewNameSource , vDim , vSubsetNameSource );



# -- Paramètres supplémentaires de la vue source 
ViewExtractSkipZeroesSet ( vCubeSource , vViewNameSource , 1 ); 
ViewExtractSkipCalcsSet(  vCubeSource , vViewNameSource , 1 ); 
ViewExtractSkipRuleValuesSet ( vCubeSource , vViewNameSource , 1 ); 

# -- Source Name Dynamic
DataSourceType = 'View';
DataSourceCubeView = vViewNameSource ;

############################################################
# -- Vue de purge

# -- Créer la vue de purge
ViewDestroy( vCubeCible , vViewNamePurge );
ViewCreate( vCubeCible , vViewNamePurge , 1 ); 

# -- Création de sous ensemble
SubsetDestroy( vDim , vSubsetNamePurge ) ; 
SubsetCreate( vDim , vSubsetNamePurge , 1 ) ; 
SubsetElementInsert( vDim , vSubsetNamePurge , 'Quantity' , 1 ); 
ViewSubsetAssign( vCubeCible , vViewNamePurge , vDim , vSubsetNamePurge );

ViewZeroOut( vCubeCible , vViewNamePurge );
#endregion
#region Metadata
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data
#****Begin: Generated Statements***
#****End: Generated Statements****


#### Afficher par tailles



#ASCIIOutput( 'TEST_YAS.txt', Product , TAILLES, Sales_Plan_Measures, NumberToString (Valeur));

# vMensualisation = 'Mensualisation'
#### Afficher par Mensualisation
i=1;
iMaxM=DimSiz( 'Months');
iMaxT=DimSiz( 'TAILLES');

ASCIIOutput( 'TEST_YAS11111111.txt',NumberToString(iMaxM));
ASCIIOutput( 'TEST_YAS22222222222222.txt',NumberToString(iMaxM));

while (i<=iMaxM );
	
    vElemM = DimNM( 'Months',i);
    vElemT = DimNM( 'TAILLE',i);
    ASCIIOutput( 'TEST_YAS33333.txt',(vElemM));
    ASCIIOutput( 'TEST_YAS44444444.txt',(vElemT));
    TextOutput( GetProcessName() | '.txt' , vMensualisation , Product , 'Months' , NumberToString( Valeur ) , NumberToString( i ) , vElemM );
    
    IF (ELLEV( 'Months' , vElemM)=0 );  
    	
    	ASCIIOutput( 'TEST_YAS1.txt',vElemM);

#     	Product , 'Months',NumberToString(Mensualisation-indic), NumberToString (Valeur));
	endif;
    i=i+1;
end;

#### Afficher par Mensualisation

# -- get 


# vDim =  'TAILLES';


# i=1;
# iMaxT=DimSiz(vDim);
# iMax=DimSiz( 'Months' );
# while (i<=iMax & i<=iMaxT );
#      # Tq 'on a pas parcouru ts les elements
#      vElemM = DimNM( 'Months',i);  
#      vElemT = DimNM( 'TAILLE',i);
#      ####On recupere l'element
#                 IF (ELLEV( 'Months' , vElemM)=0 &  ELLEV(vDim , vElemT)=0);  
   
#                        vRatio= CellGetN( 'RATIO' , Product , vElemT ,  'Pourcentage' );                    
#                        CellPutN( Valeur *vRatio , vCubeSource,Product ,vElemT, Sales_Plan_Measures );

#                        vRatio = CellGetN( 'Mensualisation'  , Product ,  vElemM , 'Pourcentage' );
#                        CellPutN( Valeur *vRatio ,     vCubeCible,        Product ,       vElemT  , vElemM , Sales_Plan_Measures );
#                 endif;
#      i=i+1;

# end;





#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****#****Begin: Generated Statements***
#****End: Generated Statements****#****Begin: Generated Statements***
#****End: Generated Statements****#****Begin: Generated Statements***
#****End: Generated Statements****#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion